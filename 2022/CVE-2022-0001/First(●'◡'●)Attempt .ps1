<#
.SYNOPSIS
    Applies the specified registry mitigation settings for CVE-2022-0001 (Intel Processors).

.DESCRIPTION
    This script checks for Administrator privileges and then sets the necessary DWord
    values in the Windows registry to enable the hardware-level mitigation for
    CVE-2022-0001, as per Microsoft's guidance. It also includes verification of
    the applied changes, file-based logging for accountability, and prompts for a
    system reboot.

.NOTES
    Requires Administrator privileges to run successfully.
    The system must be rebooted after applying the settings for the changes to take effect.
#>

# Define the target registry path
$RegistryPath = "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management"
$LogDirectory = "C:\ProgramData\ScriptLogs"
$LogFilePath = Join-Path -Path $LogDirectory -ChildPath "CVE_2022_0001_Mitigation_$(Get-Date -Format 'yyyyMMdd_HHmmss').log"

# Define the settings to apply (using Decimal equivalents for DWord)
$Settings = @(
    @{
        Name  = "FeatureSettingsOverride"
        Value = 0x00800000 # Decimal: 8388608
        Type  = "DWord"
    },
    @{
        Name  = "FeatureSettingsOverrideMask"
        Value = 0x00000003 # Decimal: 3
        Type  = "DWord"
    }
)

function Write-Log {
    param (
        [Parameter(Mandatory=$true)]
        [string]$Message
    )
    $Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $LogEntry = "[$Timestamp] $Message"
    
    # Write to log file
    Add-Content -Path $LogFilePath -Value $LogEntry
    
    # Write to console for immediate feedback (optional, but useful)
    Write-Host $Message
}

function Apply-Mitigation {
    # Ensure log directory exists
    if (-not (Test-Path -Path $LogDirectory)) {
        New-Item -Path $LogDirectory -ItemType Directory -Force | Out-Null
    }
    
    Write-Log "----------------------------------------------------------------------"
    Write-Log "Starting CVE-2022-0001 Mitigation Script"

    # Get the user who executed the script for logging purposes (e.g., DOMAIN\User or ComputerName\User)
    $CurrentUser = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
    Write-Log "Executed by: $CurrentUser"

    # Check if the script is running with elevated privileges
    if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
        Write-Error "This script must be run with Administrator privileges. Please right-click and 'Run as Administrator'."
        Write-Log "ERROR: Script not run with Administrator privileges. Exiting."
        exit 1
    }

    Write-Host "Starting mitigation application for CVE-2022-0001 (Executed by $CurrentUser)..."

    try {
        # Check if the registry path exists, and create it if it doesn't (though highly unlikely for this path)
        if (-not (Test-Path -Path $RegistryPath)) {
            Write-Log "Registry path not found. Creating path: $RegistryPath"
            New-Item -Path $RegistryPath -Force | Out-Null
        }
        
        Write-Log "--- Pre-Check: Current Registry Values at $RegistryPath ---"
        foreach ($Setting in $Settings) {
            $ExistingValue = (Get-ItemProperty -Path $RegistryPath -Name $Setting.Name -ErrorAction SilentlyContinue).$($Setting.Name)
            $DisplayValue = [System.String]::Format('0x{0:X8}', $ExistingValue)
            Write-Log "   Existing $($Setting.Name): $($DisplayValue) (Decimal: $ExistingValue)"
        }
        
        Write-Log "--- Applying Mitigation Settings ---"
        foreach ($Setting in $Settings) {
            Write-Host "Setting registry value $($Setting.Name) to $($Setting.Value)..." -NoNewline
            
            # Use Set-ItemProperty for robust, idempotent modification
            Set-ItemProperty `
                -Path $RegistryPath `
                -Name $Setting.Name `
                -Value $Setting.Value `
                -Type $Setting.Type `
                -Force -ErrorAction Stop
            
            Write-Host " Done."
            Write-Log "   Applied $($Setting.Name) with value $($Setting.Value) (Type: $($Setting.Type))"
        }

        # --- Verification and Logging ---
        
        Write-Host ""
        Write-Host "✅ SUCCESS: CVE-2022-0001 registry mitigation settings applied." -ForegroundColor Green
        Write-Log "SUCCESS: All registry changes applied."
        
        Write-Host "`n--- Verification of Applied Values ---" -ForegroundColor Cyan
        Write-Log "--- Post-Check: Verification of Applied Values ---"
        
        # Display the full registry path
        Write-Host "Registry Path: $RegistryPath" -ForegroundColor Cyan 
        Write-Log "Registry Path: $RegistryPath"
        
        foreach ($Setting in $Settings) {
            # Retrieve the newly set value
            $CurrentValue = (Get-ItemProperty -Path $RegistryPath -Name $Setting.Name -ErrorAction Stop).$($Setting.Name)
            
            # Format output to display the hexadecimal value (8 characters wide)
            $DisplayValue = [System.String]::Format('0x{0:X8}', $CurrentValue)
            
            Write-Host "   $($Setting.Name): $($DisplayValue) (Type: $($Setting.Type))"
            Write-Log "   Verified $($Setting.Name): $($DisplayValue) (Type: $($Setting.Type))"
        }
        
        Write-Host "`nApplied by: $CurrentUser" -ForegroundColor Yellow
        Write-Host "`n❗ ACTION REQUIRED: A system reboot is required for these changes to take full effect." -ForegroundColor Yellow
        
        # Ask user to reboot immediately
        $RebootChoice = Read-Host "Do you want to reboot the system now? (Y/N)"
        if ($RebootChoice -imatch "^y") {
            Write-Host "Rebooting system..."
            Write-Log "User chose 'Y'. Initiating system reboot..."
            Restart-Computer -Force
        } else {
             Write-Log "User chose 'N'. Manual reboot required."
        }
        Write-Log "Script finished successfully."
        # --------------------------------

    } catch {
        Write-Error "❌ ERROR: Failed to apply registry settings. Details: $($_.Exception.Message)"
        Write-Log "CRITICAL ERROR: Failed to apply registry settings. Details: $($_.Exception.Message)"
        exit 1
    }
    
    Write-Log "----------------------------------------------------------------------"
    Write-Host "Audit log saved to: $LogFilePath" -ForegroundColor Gray
}

# Execute the main function
Apply-Mitigation
