__author__ = 'Monzavi'
__email__ = 'monzavi@protonmail.com'

from enum import verify

__donation_BTC = 'bc1qplq8fs0cf8px5tqlmzjyxy9zknkdzs3ha65lls'

"""
This is a script for version detection of Webmin remote server interface.
CVE-2022-36446
software/apt-lib.pl in Webmin before 1.997 lacks HTML escaping for a UI command.
"""
from bs4 import BeautifulSoup
import aiohttp
import asyncio
import sys
import shutil
import time

# generated jwt & X-Auth token
JWT_TOKEN = "a7c4d085957eb6de5a0903ce3440e61628490b0ae58ca4bf115b3b871f269b7261c80b3165c81212f5fa64ff19091c0417bfb228085f2f6a5a83317cd5605aa5"
X_AUTH_TOKEN = "znCQ@2Vzv%tlLjBD++0j+K6LVY%cvB3dvPPIpa$!VS!RaaJV@$q7r3X&EAO^JQtHS/BwYPoR+Myv8DA$KQ#nVQRBfpwc#Fm3a4fw6T&lIiYDE$ytxQBXs!g2u*TzI=/W"
http_header = {
    "Authorization": "Bearer " + JWT_TOKEN,
    "X-Auth-Token": X_AUTH_TOKEN,
}

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'



def line_printer():
    print("\n")
    line = "*" * 30
    for char in line:
        time.sleep(.02)
        sys.stdout.write(char)
        sys.stdout.flush()

    print("\n")


def version_extractor(text_version:str):
    try:
        return float(text_version.split("/")[1])
    except:
        return None


def vulnerability_detection(html_response:str, proxy_service:str,service_version:float):
    print("---------------------------------------")
    print("[X] Squid proxy server version:", squid_version)
    protocol = ''
    ip = ''
    port = ''
    splited_data = proxy_service.split(':')
    if len(splited_data) == 3:
        protocol, ip, port = splited_data
    elif len(splited_data) == 2:
        protocol, ip= splited_data

    if port == '' and protocol == 'http':
        port = '80'

    if port == '' and protocol == 'https':
        port = '443'

    if "/" in str(ip):
        ip = ip.replace("/","")

    print("[X]", bcolors.OKBLUE +  f"PROTOCOL:" + bcolors.ENDC, bcolors.OKCYAN +  protocol + bcolors.ENDC)
    print("[X]", bcolors.OKBLUE +  f"IP:" + bcolors.ENDC, bcolors.OKCYAN +  ip + bcolors.ENDC)
    print("[X]", bcolors.OKBLUE +  f"PORT:" + bcolors.ENDC, bcolors.OKCYAN +  port + bcolors.ENDC)

    if service_version < 7.2:
        error_page = BeautifulSoup(html_response, "html.parser")
        email = next((a['href'][7:] for a in error_page.find_all('a', href=True) if a['href'].startswith('mailto:')), None)
        if JWT_TOKEN in email:
            print("[X]", bcolors.WARNING + "This version is Vulnerable to" + bcolors.ENDC,
                  bcolors.FAIL + "CVE-2025-62168" + bcolors.ENDC)
    else:
        print("[X]", bcolors.OKGREEN + "This version is not Vulnerable to" + bcolors.ENDC,
              bcolors.FAIL + "CVE-2025-62168" + bcolors.ENDC)


async def send_request(proxy_url:str):
    url = 'http://127.0.0.1'
    async with aiohttp.ClientSession(proxy=proxy_url,headers=http_header) as session:
        async with session.get(url,ssl=False) as response:
            html_response, header_response = await response.text(),response.headers
            return header_response, html_response


if __name__ == '__main__':
    print(r"""
******************************************************************************************************************************************************************
*                                                                                                                                                                *
*  ,-----.    ,--.   ,--.    ,------.                ,---.       ,--.       ,---.     ,-----.                 ,--.      ,---.      ,--.      ,--.      ,---.     *
* '  .--./     \  `.'  /     |  .---'    ,-----.    '.-.  \     /    \     '.-.  \    |  .--'    ,-----.     /  .'     '.-.  \    /   |     /  .'     |  o  |    *
* |  |          \     /      |  `--,     '-----'     .-' .'    |  ()  |     .-' .'    '--. `\    '-----'    |  .-.      .-' .'    `|  |    |  .-.     .'   '.    *
* '  '--'\       \   /       |  `---.               /   '-.     \    /     /   '-.    .--'  /               \   o |    /   '-.     |  |    \   o |    |  o  |    *
*  `-----'        `-'        `------'               '-----'      `--'      '-----'    `----'                 `---'     '-----'     `--'     `---'      `---'     *
*  About developer: https://github.com/monzaviman                                                                                                                *
******************************************************************************************************************************************************************



    [1]: Check CVE-2025-62168 for a squid-proxy server
    [2]: Check CVE-2025-62168 for text file
    [3]: Exit


        """)
    command = input('Enter a number: ')
    if command == '1':
        squid_address = input('Enter proxy-url: ')
        header_response, html_response = asyncio.run(send_request(squid_address))
        squid_version = version_extractor(header_response['Server'])
        vulnerability_detection(html_response=html_response,proxy_service=squid_address,service_version=squid_version)
    elif command == '2':
        file_list = input('Enter filename: ')
        try:
            file = open(file_list,'r',encoding='utf-8')
            for line in file.readlines():
                squid_address = line.replace("\n","")
                header_response, html_response = asyncio.run(send_request(squid_address))
                squid_version = version_extractor(header_response['Server'])
                vulnerability_detection(html_response=html_response,proxy_service=squid_address,service_version=squid_version)
        except Exception as e:
            print("Error:",e)

    elif command == 3:
        pass
    else:
        pass